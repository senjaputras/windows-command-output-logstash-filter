input
{
        file
        {
        path => "/usr/share/logstash/input/*/*connection.log"
        start_position => "beginning"
        tags => ["Microsoft Windows Firewall"]
        sincedb_path => "/dev/null"
        }

        file
        {
        path => "/usr/share/logstash/input/*/*port.txt"
        start_position => "beginning"
        tags => ["Active Connections"]
        sincedb_path => "/dev/null"
        }

        file
        {
        path => "/usr/share/logstash/input/*/*AV-status.txt"
        start_position => "beginning"
        tags => ["AV_Status"]
        sincedb_path => "/dev/null"
        }

}
filter
{
        ruby { code => 'event.set("message", event.get("message").gsub("\u0000", "".encode("utf-8")))' }
        ruby { code => 'event.set("message", event.get("message").gsub("\r", "".encode("utf-8")))' }
        ruby { code => 'event.set("message", event.get("message").gsub("\xFF", "".encode("utf-8")))' }
        ruby { code => 'event.set("message", event.get("message").gsub("\xFE", "".encode("utf-8")))' }
        if "Microsoft Windows Firewall" in [tags]
        {
                grok
                {
                        match => { "message" => "%{TIMESTAMP_ISO8601:TimeStamp} %{WORD:Action} %{WORD:Protocol} (%{IPV6:src}|%{IPV4:src}|.*) (%{IPV6:dst}|%{IPV4:dst}|.*) (%{INT:SrcPort}|.*) (%{INT:DStPort}|.*>
                }
                date
                {
                        match => ["TimeStamp", "yyyy-MM-dd HH:mm:ss","ISO8601"]
                }
        }

        if "Active Connections" in [tags]
        {
                grok
                {
                        match => { "message" => "(\s+)%{WORD:Proto}(\s+)(%{IPV6}|%{IPV4:Local_Address}|.*):(%{INT:LocalAddress_Port}|-)(\s+)(%{IPV6}|%{IPV4:Foreign_Address}|.*):(%{INT:Foreign_Port}|.*)(\s+)(%>
                }
        }


        if "AV_Status" in [tags]
        {
                grok
                {
                        match => { "message" => "%{WORD:AV_Component}(\s+):(\s+)%{GREEDYDATA:Value}"}
                }
        }


}

output
{
        elasticsearch
        {
        hosts => ["https://x.x.x.x:xxxx"]
        index => "xxx"
        user => "xxxx"
        password => "xxxxxx"
        ssl_certificate_verification => false
  }
}
